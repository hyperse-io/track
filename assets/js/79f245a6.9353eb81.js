"use strict";(self.webpackChunk_hyperse_track_docs=self.webpackChunk_hyperse_track_docs||[]).push([[299],{4303:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>h,frontMatter:()=>s,metadata:()=>d,toc:()=>o});var a=n(2540),r=n(3023);const s={},i="AdapterBuilder",d={id:"api/adapter-builder",title:"AdapterBuilder",description:"The AdapterBuilder class is a factory used to create a new adapter instance for tracking events. It allows you to configure the adapter through a series of hooks that define how events are processed before, during, and after they are tracked.",source:"@site/docs/api/adapter-builder.md",sourceDirName:"api",slug:"/api/adapter-builder",permalink:"/track/docs/api/adapter-builder",draft:!1,unlisted:!1,editUrl:"https://github.com/hyperse-io/track/docs/api/adapter-builder.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"BaseAdapter",permalink:"/track/docs/api/base-adapter"},next:{title:"TrackBuilder",permalink:"/track/docs/api/track-builder"}},c={},o=[{value:"Hooks",id:"hooks",level:2},{value:"<code>setup</code>",id:"setup",level:3},{value:"Parameters",id:"parameters",level:4},{value:"Example",id:"example",level:4},{value:"<code>before</code>",id:"before",level:3},{value:"Parameters",id:"parameters-1",level:4},{value:"Example",id:"example-1",level:4},{value:"<code>transform</code>",id:"transform",level:3},{value:"Parameters",id:"parameters-2",level:4},{value:"Example",id:"example-2",level:4},{value:"<code>after</code>",id:"after",level:3},{value:"Parameters",id:"parameters-3",level:4},{value:"Example",id:"example-3",level:4},{value:"<code>build</code>",id:"build",level:3},{value:"Returns",id:"returns",level:4},{value:"Example",id:"example-4",level:4}];function l(e){const t={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.h1,{id:"adapterbuilder",children:"AdapterBuilder"}),"\n",(0,a.jsxs)(t.p,{children:["The ",(0,a.jsx)(t.code,{children:"AdapterBuilder"})," class is a factory used to create a new adapter instance for tracking events. It allows you to configure the adapter through a series of hooks that define how events are processed before, during, and after they are tracked."]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-typescript",metastring:'title="Signature"',children:"class AdapterBuilder<\n  Context extends TrackContext<any>,\n  EventData extends TrackEventDataBase,\n  AdapterOptions extends TrackAdapterOptions<Context, EventData>,\n> {\n  constructor(adapter: TrackAdapter<Context, EventData, AdapterOptions>);\n}\n"})}),"\n",(0,a.jsx)(t.h2,{id:"hooks",children:"Hooks"}),"\n",(0,a.jsxs)(t.p,{children:["The ",(0,a.jsx)(t.code,{children:"AdapterBuilder"})," class provides several hooks that allow you to customize the behavior of the adapter:",(0,a.jsx)(t.code,{children:"AdapterBuilder"})]}),"\n",(0,a.jsx)(t.h3,{id:"setup",children:(0,a.jsx)(t.code,{children:"setup"})}),"\n",(0,a.jsxs)(t.p,{children:["The ",(0,a.jsx)(t.code,{children:"setup"})," hook allows you to configure initial data before the event is processed. This is useful for preparing any additional data or context needed during the reporting phase."]}),"\n",(0,a.jsx)(t.h4,{id:"parameters",children:"Parameters"}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsxs)(t.li,{children:["\n",(0,a.jsxs)(t.p,{children:[(0,a.jsx)(t.strong,{children:"ctx"})," : ",(0,a.jsx)(t.code,{children:"TrackContext<TrackData>"})]}),"\n",(0,a.jsx)(t.p,{children:"The context in which the tracking is occurring. This typically includes details such as user information, environment, or other contextual data relevant to the tracking event."}),"\n"]}),"\n",(0,a.jsxs)(t.li,{children:["\n",(0,a.jsxs)(t.p,{children:[(0,a.jsx)(t.strong,{children:"eventType"})," : ",(0,a.jsx)(t.code,{children:"keyof EventData"})]}),"\n",(0,a.jsx)(t.p,{children:"The type of event being tracked. This is usually a key from the EventData that corresponds to specific events like click, purchase, etc."}),"\n"]}),"\n",(0,a.jsxs)(t.li,{children:["\n",(0,a.jsxs)(t.p,{children:[(0,a.jsx)(t.strong,{children:"eventData"})," : ",(0,a.jsx)(t.code,{children:"EventData[keyof EventData]"})]}),"\n",(0,a.jsx)(t.p,{children:"The data associated with the event. This contains all relevant information for the specific event type."}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(t.h4,{id:"example",children:"Example"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-typescript",metastring:'title="AdapterBuilder.ts"',children:"adapterBuilder.setup(\n  (\n    ctx: TrackContext<TrackData>,\n    eventType: keyof EventData,\n    eventData: EventData[keyof EventData]\n  ) => {\n    return Promise.resolve({\n      name: 'setup',\n      timeStamp: Date.now(),\n    });\n  }\n);\n"})}),"\n",(0,a.jsx)(t.h3,{id:"before",children:(0,a.jsx)(t.code,{children:"before"})}),"\n",(0,a.jsxs)(t.p,{children:["The ",(0,a.jsx)(t.code,{children:"before"})," hook is executed before tracking an event. This is where you can perform any necessary preprocessing or validation."]}),"\n",(0,a.jsx)(t.h4,{id:"parameters-1",children:"Parameters"}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsxs)(t.li,{children:["\n",(0,a.jsxs)(t.p,{children:[(0,a.jsx)(t.strong,{children:"ctx"})," : ",(0,a.jsx)(t.code,{children:"TrackContext<TrackData>"})]}),"\n",(0,a.jsx)(t.p,{children:"The context in which the tracking is occurring. This typically includes details such as user information, environment, or other contextual data relevant to the tracking event."}),"\n"]}),"\n",(0,a.jsxs)(t.li,{children:["\n",(0,a.jsxs)(t.p,{children:[(0,a.jsx)(t.strong,{children:"eventType"})," : ",(0,a.jsx)(t.code,{children:"keyof EventData"})]}),"\n",(0,a.jsx)(t.p,{children:"The type of event being tracked. This is usually a key from the EventData that corresponds to specific events like click, purchase, etc."}),"\n"]}),"\n",(0,a.jsxs)(t.li,{children:["\n",(0,a.jsxs)(t.p,{children:[(0,a.jsx)(t.strong,{children:"eventData"})," : ",(0,a.jsx)(t.code,{children:"EventData[keyof EventData]"})]}),"\n",(0,a.jsx)(t.p,{children:"The data associated with the event. This contains all relevant information for the specific event type."}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(t.h4,{id:"example-1",children:"Example"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-typescript",metastring:'title="AdapterBuilder.ts"',children:"adapterBuilder.before(\n  (\n    ctx: TrackContext<TrackData>,\n    eventType: keyof EventData,\n    eventData: EventData[keyof EventData]\n  ) => {\n    //do something\n  }\n);\n"})}),"\n",(0,a.jsx)(t.h3,{id:"transform",children:(0,a.jsx)(t.code,{children:"transform"})}),"\n",(0,a.jsxs)(t.p,{children:["The ",(0,a.jsx)(t.code,{children:"transform"})," hook allows you to modify the event data before it is sent to the tracking system. You can use this hook to change, enrich, or sanitize the event data."]}),"\n",(0,a.jsx)(t.h4,{id:"parameters-2",children:"Parameters"}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsxs)(t.li,{children:["\n",(0,a.jsxs)(t.p,{children:[(0,a.jsx)(t.strong,{children:"eventType"})," : ",(0,a.jsx)(t.code,{children:"keyof EventData"})]}),"\n",(0,a.jsx)(t.p,{children:"The type of event being tracked. This is usually a key from the EventData that corresponds to specific events like click, purchase, etc."}),"\n"]}),"\n",(0,a.jsxs)(t.li,{children:["\n",(0,a.jsxs)(t.p,{children:[(0,a.jsx)(t.strong,{children:"fun"})," : ",(0,a.jsx)(t.code,{children:"( ctx: Context, eventType: Key, eventData: LeftEventData[Key] ) => AdapterReportData | Promise<AdapterReportData>"})]}),"\n",(0,a.jsx)(t.p,{children:"The function to transform the event data."}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(t.h4,{id:"example-2",children:"Example"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-typescript",metastring:'title="AdapterBuilder.ts"',children:"adapterBuilder\n  .transform(\n    'addCart',\n    (\n      ctx: TrackContext<TrackData>,\n      eventType: 'addCart',\n      eventData: EventData['addCart']\n    ) => {\n      return {\n        ...eventData,\n        goodName: 'ac_' + eventData?.goodsName,\n        timeStamp: Date.now(),\n      };\n    }\n  )\n  .transform(\n    'previewGoods',\n    (\n      ctx: TrackContext<TrackData>,\n      eventType: 'previewGoods',\n      eventData: EventData['previewGoods']\n    ) => {\n      return {\n        ...eventData,\n        goodName: 'pg_' + eventData?.goodsName,\n        timeStamp: Date.now(),\n      };\n    }\n  );\n"})}),"\n",(0,a.jsx)(t.h3,{id:"after",children:(0,a.jsx)(t.code,{children:"after"})}),"\n",(0,a.jsxs)(t.p,{children:["The ",(0,a.jsx)(t.code,{children:"after"})," hook is executed after the event has been reported. This is where you can perform any post-processing, such as logging or triggering additional actions based on the reported data."]}),"\n",(0,a.jsx)(t.h4,{id:"parameters-3",children:"Parameters"}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsxs)(t.li,{children:["\n",(0,a.jsxs)(t.p,{children:[(0,a.jsx)(t.strong,{children:"ctx"})," : ",(0,a.jsx)(t.code,{children:"TrackContext<TrackData>"})]}),"\n",(0,a.jsx)(t.p,{children:"The context in which the tracking is occurring. This typically includes details such as user information, environment, or other contextual data relevant to the tracking event."}),"\n"]}),"\n",(0,a.jsxs)(t.li,{children:["\n",(0,a.jsxs)(t.p,{children:[(0,a.jsx)(t.strong,{children:"eventType"})," : ",(0,a.jsx)(t.code,{children:"keyof EventData"})]}),"\n",(0,a.jsx)(t.p,{children:"The type of event being tracked. This is usually a key from the EventData that corresponds to specific events like click, purchase, etc."}),"\n"]}),"\n",(0,a.jsxs)(t.li,{children:["\n",(0,a.jsxs)(t.p,{children:[(0,a.jsx)(t.strong,{children:"reportData"})," : ",(0,a.jsx)(t.code,{children:"AdapterReportData"})]}),"\n",(0,a.jsx)(t.p,{children:"The data that needs to be reported. This can include the event type, associated data, and any additional metadata that should be sent to the third-party service."}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(t.h4,{id:"example-3",children:"Example"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-typescript",metastring:'title="AdapterBuilder.ts"',children:"adapterBuilder.after(\n  (\n    ctx: TrackContext<TrackData>,\n    eventType: keyof EventData,\n    reportData: AdapterReportData\n  ) => {\n    //do something\n  }\n);\n"})}),"\n",(0,a.jsx)(t.h3,{id:"build",children:(0,a.jsx)(t.code,{children:"build"})}),"\n",(0,a.jsxs)(t.p,{children:["The ",(0,a.jsx)(t.code,{children:"build"})," method finalizes the adapter configuration and creates an instance of the adapter."]}),"\n",(0,a.jsx)(t.h4,{id:"returns",children:"Returns"}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsxs)(t.li,{children:["\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.code,{children:"Adapter<Context, EventData, AdapterOptions>"})}),"\n",(0,a.jsx)(t.p,{children:"The configured adapter instance."}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(t.h4,{id:"example-4",children:"Example"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-typescript",metastring:'title="AdapterBuilder.ts"',children:"const adapter = adapterBuilder.build();\n"})})]})}function h(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(l,{...e})}):l(e)}},3023:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>d});var a=n(3696);const r={},s=a.createContext(r);function i(e){const t=a.useContext(s);return a.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function d(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),a.createElement(s.Provider,{value:t},e.children)}}}]);